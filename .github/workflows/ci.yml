name: Run build pipeline

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - main
      - stable/*
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: floris272/open-producten
  DJANGO_SETTINGS_MODULE: open_producten.conf.ci
  DOCKER_BUILDKIT: '1'

jobs:

  setup:
    name: Set up the build variables
    runs-on: ubuntu-latest
    outputs:
      tag: ${% templatetag openvariable %} steps.vars.outputs.tag {% templatetag closevariable %}
      git_hash: ${% templatetag openvariable %} steps.vars.outputs.git_hash {% templatetag closevariable %}

    steps:
      - name: Extract version information
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${% templatetag openvariable %} github.ref {% templatetag closevariable %}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${% templatetag openvariable %} github.ref {% templatetag closevariable %}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          # PRs result in version 'merge' -> transform that into 'latest'
          [ "$VERSION" == "merge" ] && VERSION=latest

          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "git_hash=${GITHUB_SHA}" >> $GITHUB_OUTPUT

  tests:
    name: Run the Django test suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # Needed because the postgres container does not provide a healthcheck
        options: >-
          --name postgres
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name postgres
      redis:
        image: redis:6
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - name: Set up backend environment
        uses: maykinmedia/setup-django-backend@v1.3
        with:
          python-version: '3.11'
          optimize-postgres: 'yes'
          pg-service: 'postgres'
          setup-node: 'no'
          # apt-packages: 'gettext postgresql-client'  # the default
          # npm-ci-flags: '--legacy-peer-deps' -> preferably use a .npmrc file

      - name: Run tests
        run: |
          python src/manage.py compilemessages
          python src/manage.py collectstatic --noinput --link
          coverage run src/manage.py test src
        env:
          SECRET_KEY: dummy
          DB_USER: postgres
          DB_PASSWORD: ''

      - name: Publish coverage report
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      # API projects: implement the necessary scripts for this. You can take a look
      # at open-forms for inspiration, using drf-spectacular.
      # - name: Generate OAS
      #   run: ./bin/generate_oas.sh openapi.yaml

      # - name: Store generated OAS
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: open_producten-oas
      #     path: openapi.yaml
      #     retention-days: 1

  # docs:
  #   name: Build and check documentation
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: maykinmedia/setup-django-backend@v1.3
  #       with:
  #         python-version: '3.11'
  #         setup-node: 'no'
  #         # apt-packages: 'gettext postgresql-client'  # the default

  #     - name: Build and test docs
  #       run: |
  #         export OPENSSL_CONF=$(pwd)/openssl.conf
  #         pytest check_sphinx.py -v --tb=auto
  #       working-directory: docs

  docker_build:
    name: Build Docker image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${% templatetag openvariable %} steps.image_build.outputs.image_tag {% templatetag closevariable %}

    needs:
      - setup

    steps:
      - uses: actions/checkout@v4

      - name: Build the production Docker image
        id: image_build
        run: |
          image_tag="$IMAGE_NAME:$RELEASE_VERSION"
          echo "image_tag=${image_tag}" >> $GITHUB_OUTPUT
          docker build . \
            --tag $image_tag \
            --build-arg COMMIT_HASH=${% templatetag openvariable %} needs.setup.outputs.git_hash {% templatetag closevariable %} \
            --build-arg RELEASE=${% templatetag openvariable %} needs.setup.outputs.tag {% templatetag closevariable %} \
        env:
          RELEASE_VERSION: ${% templatetag openvariable %} needs.setup.outputs.tag {% templatetag closevariable %}

      - run: docker image save -o image.tar $IMAGE_NAME:${% templatetag openvariable %} needs.setup.outputs.tag {% templatetag closevariable %}
      - name: Store image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

  docker_push:
    needs:
      - tests
      - docker_build

    name: Push Docker image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' # Exclude PRs

    steps:
      - name: Download built image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load image
        run: |
          docker image load -i image.tar

      - name: Log into registry
        run:
          echo "${% templatetag openvariable %} secrets.DOCKER_TOKEN {% templatetag closevariable %}" | docker login -u ${% templatetag openvariable %} secrets.DOCKER_USERNAME {% templatetag closevariable %}
          --password-stdin

      - name: Push the Docker image (production)
        run: docker push ${% templatetag openvariable %} needs.docker_build.outputs.image_tag {% templatetag closevariable %}
